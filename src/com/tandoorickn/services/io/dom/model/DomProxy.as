package com.tandoorickn.services.io.dom.model{	import com.tandoorickn.patterns.proxy.AbstractProxy;	import com.tandoorickn.services.io.bufferloader.model.BufferloaderProxy;	import com.tandoorickn.services.io.dom.interfaces.IDomResource;	import com.tandoorickn.services.io.dom.model.DomResource;	import com.tandoorickn.services.io.dom.model.URI;		import flash.events.Event;	import flash.external.ExternalInterface;		public class DomProxy extends AbstractProxy	{		public static var 	NAME					:String = 'DomProxy';				private var _loader:BufferloaderProxy,					_utilsToLoad			:Array,					_helpersAvailable		:Boolean,					_sFct					:Function,					_eFct					:Function,					_resourcesMap			:Object;				public function DomProxy(proxyName:String=null, data:Object=null)		{			super(proxyName, data);			_helpersAvailable = false;			_resourcesMap = {};		}						public function get available():Boolean 						{ return ExternalInterface.available; }				public function get helpersAvailable():Boolean 					{ return (this.available && this._helpersAvailable)? true : false; }				public function isRessourceAvailable(name:String):Boolean 		{ return (_resourcesMap[name])? true: false; }				public function call(method:String,...args):*		{ 			if(args == null) args = new Array();			args.unshift(method);			return ExternalInterface.call.apply(null,args);		}				public function addRessource(ressource:IDomResource):void		{			switch(ressource.type) {								case DomResource.RAW_JAVASCRIPT:					this.call(this.wrapRawJs(ressource.content));					break;								case DomResource.XML_FLASH_JAVASCRIPT:					this.call(ressource.content);					break;							}						_resourcesMap[ressource.name] = true;		}				public function initHelpers(someMoreJsHelpersUri:Array = null):Function		{			this.call(DomResource.tandooriDomUtils);			_loader = this.facade.retrieveProxy(BufferloaderProxy.NAME) as BufferloaderProxy;			_utilsToLoad = new Array();						if(!this.call("tandooriDomUtils.testJquery")) _utilsToLoad.push(URI.JS_JQUERY);			//if(!this.call("tandooriDomUtils.testSwfobject")) _utilsToLoad.push(URI.JS_SWFOBJECT);									if(someMoreJsHelpersUri != null) _utilsToLoad = _utilsToLoad.concat(someMoreJsHelpersUri);						//this.facade.log("debug","DomProxy","initHelpers _utilsToLoad:",_utilsToLoad);						return function(success:Function,error:Function):void			{				_sFct = success;				_eFct = error;				if(_utilsToLoad.length > 0 ) _loader.expressLoad(_utilsToLoad, [])(domLoadingSuccess,domLoadingError);				else success();			};		}				private function domLoadingSuccess(e:Event):void		{			for( var i:* in _utilsToLoad) {				this.call(this.wrapRawJs( _loader.getContent(_utilsToLoad[i]) ) );			}			_helpersAvailable = true;			this.facade.log("info","DomProxy",_utilsToLoad,"scripts added in dom");			_sFct();		}				private function domLoadingError(e:Event):void		{			this.facade.log("warn","DomProxy","Unable to load all js for dom");			_eFct();		}				private function wrapRawJs(content:String):XML 		{ return XML("<script><![CDATA[ function(){ "+content+" } ]]></script>"); }			}}