package com.tandoorickn.services.io.rpc.dao{	import com.adobe.crypto.HMAC;	import com.adobe.crypto.SHA256;	import com.tandoorickn.errors.TandooriError;	import com.tandoorickn.patterns.dao.AbstractDAO;	import com.tandoorickn.utils.random.RandomChar;	import com.tandoorickn.debug.Log;		import flash.events.*;	import flash.net.NetConnection;	import flash.net.ObjectEncoding;	import flash.net.Responder;		public class AMFDAO extends AbstractDAO	{				public var _nc:NetConnection;				public var objectEncoding:String;				public function AMFDAO(name:String,uri:String,type:String,params:Object = null)		{			super(name,uri,type);						_nc = new NetConnection();			_nc.addEventListener(NetStatusEvent.NET_STATUS, status);			_nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);			super.configureListeners(_nc);									if(params)			{				if(params.objectEncoding) _nc.objectEncoding = params.objectEncoding;				else _nc.objectEncoding = ObjectEncoding.AMF0;			}else _nc.objectEncoding = ObjectEncoding.AMF0;					}				override public function connect():void		{			_nc.connect(uri);		}				override public function get isConnected():Boolean						{ return _nc.connected; }				override public function call(method:String,parameters:Array = null):Function		{			return function(successResponder:Function,errorResponder:Function):void			{								externalErrorResponder  = errorResponder;				externalSuccessResponder = successResponder;								var args:Array =  new Array(method, new Responder(successResponder, nativeErrorResponder));				if(parameters) for(var t:uint = 0; t < parameters.length; t++) args.push(parameters[t]);								//Log.debug("AMFDAO","method",method,"parameters",args,"successResponder",successResponder,"errorResponder",errorResponder);								_nc.call.apply(this,args);			};		}				protected function nativeSuccessResponder(response:*):void		{			externalSuccessResponder(response);		}				override public function close():void		{			_nc.close();		}				public function status(e:NetStatusEvent):void		{									var info: Object =e.info;						switch (info.code) {								// CONNECTION SUCCESS				case "NetConnection.Connect.Success" :					//Log.info("AMFDAO - "+name," status -> '"+e.info.code+"'");						break;								// CALLS ERRORS				case "NetConnection.Call.Failed":				case "NetConnection.Call.BadVersion":				case "NetConnection.Call.Prohibited":										// CONNECTION FAILD				case "NetConnection.Connect.InvalidApp":				case "NetConnection.Connect.AppShutdown":				case "NetConnection.Connect.Failed" :				case "NetConnection.Connect.Rejected" :					var error:TandooriError = new TandooriError("NetConnection",info.code,"com.tandoorickn.services.io.rpc.dao.AMFDAO Class","Some things went wrong with calls or connection...");					nativeErrorResponder(error);					break;								case "NetConnection.Connect.Closed" :					//Log.info("AMFDAO - "+name," status -> '"+e.info.code+"'");					break;								// ELSE				default :					//Log.info("AMFDAO - "+name," status -> '"+e.info.code+"'");					break;			}		} 				private function onAsyncError(event:AsyncErrorEvent):void {			var error:TandooriError = new TandooriError("onAsyncError",event.toString(),"com.tandoorickn.services.io.rpc.dao.AMFDAO Class","An AsyncErrorEvent");			nativeErrorResponder(error);		}						// UTILS		public function nonce(value:uint):String		{			return RandomChar.randomiz(value);		}				public function hash(key:String,stringToHash:String):String		{			var alog:Object		=		SHA256;			var hash:String		=		HMAC.hash(key,stringToHash,alog);						return hash;		}					}}