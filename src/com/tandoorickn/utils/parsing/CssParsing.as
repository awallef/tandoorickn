package com.tandoorickn.utils.parsing{	public class CssParsing extends Object	{				//public static const REGEX_SINGLE_PSEUDO_ELEMENT:RegExp 		= /[:]{1,2}(?:first\-(letter|line)|before|after|selection|value|choices|repeat\-(item|index)|outside|alternate|(line\-)?marker|slot\([_a-z0-9\-\+\.\\]*\))/i;				//public static const REGEX_PSEUDO_ELEMENTS:RegExp		 	= /([:]{1,2}(?:first\-(letter|line)|before|after|selection|value|choices|repeat\-(item|index)|outside|alternate|(line\-)?marker|slot\([_a-z0-9\-\+\.\\]*\)))/ig;				//public static const REGEX_PSEUDO_CLASSES_EXCEPT_NOT:RegExp	= /([:](?:(link|visited|active|hover|focus|lang|root|empty|target|enabled|disabled|checked|default|valid|invalid|required|optional)|((in|out\-of)\-range)|(read\-(only|write))|(first|last|only|nth)(\-last)?\-(child|of\-type))(?:\([_a-z0-9\-\+\.\\]*\))?)/ig;				public static const REGEX_ATTR_SELECTORS:RegExp				= /([a-z]+[_a-z0-9\\]*)/ig; //= /(\[\s*[_a-z0-9-:\.\|\\]+\s*(?:[~\|\*\^\$]?=\s*[\"\'][^\"\']*[\"\'])?\s*\])/ig;				public static const REGEX_ID_SELECTORS:RegExp				= /(#[a-z]+[_a-z0-9-:\\]*)/ig;				public static const REGEX_CLASS_SELECTORS:RegExp			= /(\.[_a-z]+[_a-z0-9-:\\]*)/ig;				public static const IMPORTANT_RULE:RegExp					= /\!\s*important\s*$/i;				public static const REGEX_ATTR_GROUP:RegExp					= /((\s*([^,{]+)\s*,?\s*)*?){((\s*([^:]+)\s*:\s*([^;]+?)\s*;\s*)*?)}/g;				public static const REGEX_ATTR_NAME:RegExp					= /(\s*([^,{]+)\s*,?\s*)*/;				public static const TEST:RegExp								= /(([^,{]+)\s*,?\s*)*/g;				public function CssParsing()		{			super();					}				public static function parseCssString(str:String):void		{						var rules:Array = str.match(REGEX_ATTR_GROUP);			trace(rules, rules.length);						for( var i:uint = 0; i < rules.length; i++)			{				var attributes:Array = rules[i].match(REGEX_ATTR_SELECTORS);				var ids:Array = rules[i].match(REGEX_ID_SELECTORS);				var classes:Array = rules[i].match(REGEX_CLASS_SELECTORS);								trace("attributes",attributes);				trace("ids",ids);				trace("classes",classes);			}									/*matches2[0] = matches2[0].replace(/\s/g,"");			matches2 = ( matches2[0] as String).split(",");*/									/*			var result:Object = pattern.exec(brutCss);			trace(result[0]);			//trace(pattern.lastIndex,brutCss.length);			while(pattern.lastIndex < brutCss.length)			{				result = pattern.exec(brutCss);				trace(result[0]);				trace(pattern.lastIndex);			}						*/		}	}}