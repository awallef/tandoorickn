package com.tandoorickn.core{	import org.puremvc.as3.core.Model;	import org.puremvc.as3.interfaces.*;		import com.tandoorickn.patterns.facade.AbstractFacade;	import com.tandoorickn.patterns.proxy.AbstractProxy;		public class TModel implements IModel	{				public var facade : AbstractFacade;				protected var proxyMap : Array;				public function TModel( )		{			proxyMap = new Array();			}				public function registerProxy( proxy:IProxy ) : void		{			proxyMap[ proxy.getProxyName() ] = proxy;			( proxy as AbstractProxy).facade = facade;			proxy.onRegister();		}		public function retrieveProxy( proxyName:String ) : IProxy		{			return proxyMap[ proxyName ];		}		public function hasProxy( proxyName:String ) : Boolean		{			return proxyMap[ proxyName ] != null;		}				public function removeProxy( proxyName:String ) : IProxy		{			var proxy:IProxy = proxyMap [ proxyName ] as IProxy;			if ( proxy ) 			{				proxyMap[ proxyName ] = null;				proxy.onRemove();			}			return proxy;		}	}}