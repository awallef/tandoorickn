package com.tandoorickn.patterns.facade{	import com.tandoorickn.core.*;	import com.tandoorickn.debug.Log;	import com.tandoorickn.events.facade.FacadeEvent;	import com.tandoorickn.patterns.dom.InternalDom;	import com.tandoorickn.patterns.mediator.AbstractMediator;	import com.tandoorickn.patterns.process.MacroProcessor;	import com.tandoorickn.patterns.process.Processor;	import com.tandoorickn.patterns.process.ProcessorHistory;	import com.tandoorickn.patterns.proxy.AbstractProxy;	import com.tandoorickn.patterns.sequencer.Sequencer;	import com.tandoorickn.patterns.service.AbstractService;	import com.tandoorickn.patterns.service.ServiceManager;	import com.tandoorickn.patterns.workflow.WorkflowManager;	import com.tandoorickn.services.application.init.InitializingService;		import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;		import org.puremvc.as3.interfaces.*;	import org.puremvc.as3.patterns.observer.Notification;
	public class AbstractFacade extends EventDispatcher	{		protected var _controller 		: TController;		protected var _model		 	: TModel;		protected var _view		 		: TView;				public var	name				:String		= "AbstractFacade";						public var 	service				:ServiceManager;				public function AbstractFacade(name:String = null,target:IEventDispatcher=null) {						super(target);			if(name) this.name = name;			initializeFacade();		}				protected function initializeFacade(  ):void		{						service				= new ServiceManager();						_view 				= new TView();			_controller 		= new TController();			_model 				= new TModel();									service.facade		= this;						_view.facade 		= this;			_model.facade 		= this;			_controller.facade 	= this;			_controller.view	= _view;		}				/*  INIT TO OVERRIDE		********************************************************************/				public function initApplication(obj:Object, commandClassRef:Class ):void		{			var notification:Notification = new Notification("iniApplication",{});			notification.getBody().configurationObject = obj;			notification.getBody().commandClassRef = commandClassRef;			this.service.registerService(InitializingService,notification);		}				public function initFacade(obj:Object):void		{			var notification:Notification = new Notification("initFacade",obj);			registerServices(notification);			registerWorkflows(notification);			registerUi(notification);			dispatchEvent( new FacadeEvent(FacadeEvent.INITIALIZED,"-1","Facde is initialized",notification.getName(),notification.getBody(),notification.getType()));		}				public function registerServices(notification:Notification):void		{					}				public function registerWorkflows(notification:Notification):void		{					}				public function registerUi(notification:Notification):void		{					}				/*  ERROR & LOGS		********************************************************************/		public function log(type:String,sender:String,... args):void		{			args.unshift(sender+" - "+this.name);			switch(type)			{				case "warn":					Log.warn.apply(null,args);					break;								case "info":					Log.info.apply(null,args);					break;								case "error":					Log.error.apply(null,args);					break;								default:					Log.debug.apply(null,args);			}		}				public function throwError(code:String,message:String,noteName:String = null,noteBody:Object = null,noteType:String = null):void		{			dispatchEvent( new FacadeEvent(FacadeEvent.ERROR,code,message,noteName,noteBody,noteType));		}				/*  HISTORY TODO		********************************************************************/				public function get history():ProcessorHistory		{ return process.history; }				/* Controller Short cuts		*******************************************************************/				public function get sequencer():Sequencer							{ return _controller.sequencer; }				public function get process():Processor								{ return _controller.process; }				public function get macro():MacroProcessor							{ return _controller.macro; }				public function get workflow():WorkflowManager						{ return _controller.workflow; }				public function goto(labelOrName:String, body:Object = null, type:String = null):void		{			_controller.sequencer.goto(labelOrName, body, type);		}				public function registerCommand( notificationName:String, commandClassRef:Class ):void 		{			_controller.registerCommand( notificationName, commandClassRef );		}				public function removeCommand( notificationName:String ):void 		{			_controller.removeCommand( notificationName );		}				public function hasCommand( notificationName:String ) : Boolean		{			return _controller.hasCommand(notificationName);		}				/* View Short cuts		*******************************************************************/				public function get iDom():InternalDom							{ return _view.iDom; }				public function registerMediator( mediator:AbstractMediator ):void 		{			_view.registerMediator( mediator );		}				public function retrieveMediator( mediatorName:String ):IMediator 		{			return _view.retrieveMediator( mediatorName ) as IMediator;		}				public function removeMediator( mediatorName:String ) : IMediator 		{			var mediator:IMediator;			mediator = _view.removeMediator( mediatorName );						return mediator;		}				public function hasMediator( mediatorName:String ) : Boolean		{			return _view.hasMediator( mediatorName );		}				public function sendNotification( notificationName:String, body:Object=null, type:String=null ):void 		{			notifyObservers( new Notification( notificationName, body, type ) );		}				public function notifyObservers ( notification:INotification ):void {			_view.notifyObservers( notification );		}								/*  Model Shortcuts		********************************************************************/		public function registerProxy ( proxy:AbstractProxy ):void			{			_model.registerProxy ( proxy );			}						public function retrieveProxy ( proxyName:String ):IProxy 		{			return _model.retrieveProxy ( proxyName );			}		public function removeProxy ( proxyName:String ):IProxy 		{			var proxy:IProxy;			proxy = _model.removeProxy ( proxyName );				return proxy		}		public function hasProxy( proxyName:String ) : Boolean		{			return _model.hasProxy( proxyName );		}		}}