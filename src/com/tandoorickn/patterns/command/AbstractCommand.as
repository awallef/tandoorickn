package com.tandoorickn.patterns.command{	import com.tandoorickn.errors.TandooriError;	import com.tandoorickn.patterns.observer.AbstractNotifier;		import org.puremvc.as3.interfaces.*;		public class  AbstractCommand extends  AbstractNotifier implements ICommand, INotifier 	{				public var 	note				:INotification,					requiredArgs		:Array					= null;				public function execute( notification:INotification ) : void		{			note = notification;			var body:Object = note.getBody();			if(!body) note.setBody({});						if(requiredArgs)			{				for( var i:uint = 0; i < requiredArgs.length; i++)				{					if(note.getBody()[requiredArgs[i]] === null) 					{						var error:String = "Missing required argument: "+ requiredArgs[i];						this.facade.log("error","AbstractCommand",error);						throw new Error(error);					}				}			}					}				public function revision( notification:INotification ) : void		{					}				public function crashed(error:* = null):void		{			var _e:TandooriError;						if(error is TandooriError) _e = error;			else _e = new TandooriError("crashed",error,"com.tandoorickn.patterns.command.AbstractCommand Class","A Crashed callback fct");						if(note.getBody().metadata) 			{				note.getBody().metadata.error = _e;				this.facade.process.reportCrash(note);			}			else 			{				this.facade.log("warn","AbstractCommand",note.getName()," has crashed at", new Date().time,"with error:",_e);				this.facade.throwError(_e.code,_e.description,note.getName(),note.getBody(),note.getType());			}		}				public function nextProcess():void		{			if(note.getBody().metadata) this.facade.process.nextProcess(note.getBody().metadata.process,note.getBody());		}									}}