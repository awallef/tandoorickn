package  com.tandoorickn.patterns.process{	import com.tandoorickn.interfaces.patterns.IProcess;	import com.tandoorickn.patterns.command.CommandMetadata;	import com.tandoorickn.patterns.facade.AbstractFacade;		import flash.events.EventDispatcher;		import org.puremvc.as3.interfaces.*;		public class Processor extends EventDispatcher	{		private var 	_factory			:ProcessorFactory,		 				_history			:ProcessorHistory;							public var		facade				:AbstractFacade;				public function Processor()		{			_factory = new ProcessorFactory();			_history = new ProcessorHistory();		}				public function get history():ProcessorHistory  { return _history; }				public function addCommandAt(name:String,index:uint,notification:INotification,commands:Array):void		{			if(!this.hasProcess(name))			{				this.facade.log("warn","Processor","process:",name,"doesn't exists");				return;			}			_factory.addCommandAt(name,index,commands);			CommandMetadata.addStepsAt( ( _factory.stack[name] as IProcess ).stack ,index, notification );		}				public function getSpecificStack(name:String):Array		{			if(!this.hasProcess(name))			{				this.facade.log("warn","Processor","process:",name,"doesn't exists");				return [];			}			return (_factory.stack[name] as Process).stack;		}				public function addProcess(process:Process):void		{			if(this.hasProcess(process.name))			{				this.facade.log("warn","Processor","process:",process.name,"already exists");				return;			}			_factory.addProcess(process);		}				public function addAndCreateProcess(name:String,args:Array,once:Boolean = false):void		{			if(this.hasProcess(name))			{				this.facade.log("warn","Processor","process:",name,"already exists");				return;			}			_factory.registerProcess(name,args,once);		}				public function removeProcess(name:String, andDistroy:Boolean = false):void		{			if(!this.hasProcess(name))			{				this.facade.log("warn","Processor","process:",name,"doesn't exists");				return;			}			_factory.removeProcess(name,andDistroy);		}				public function removeAllProcess(andDistroy:Boolean = false):void		{			_factory.removeAllProcess(andDistroy);		}				public function retriveProcess(name:String):Process		{			if(!this.hasProcess(name))			{				this.facade.log("warn","Processor","process:",name,"doesn't exists");				return null;			}						return _factory.stack[name] as Process;		}				public function hasProcess(name:String):Boolean		{			return (_factory.stack[name])? true: false;		}				public function execute(name:String, notification:INotification = null):void		{			if(!this.hasProcess(name))			{				this.facade.log("warn","Processor","process:",name,"doesn't exists");				return;			}			this.facade.log("info","\n-- Processor","process '"+name+"' starts...");						CommandMetadata.setMeta(name,CommandMetadata.PROCESS,notification);			CommandMetadata.setSteps( ( _factory.stack[name] as IProcess ).stack , notification );						var process:Process = _factory.stack[name] as Process;			process.state = Process.PROCESSING;			process.executedAt = CommandMetadata.getTime();			process.count = 0;			process.runs++;						this.exec(name,notification.getBody(), notification.getType());		}				public function reportCrash(notification:INotification = null):void		{			var body:Object = notification.getBody();			var process:Process = _factory.stack[body.metadata.process] as Process;			process.state = Process.CRASHED;			process.crashedAt = CommandMetadata.getTime();			process.crashedCommand = process.stack[process.count];			process.error = body.metadata.error;						this.facade.log("warn","Processor","process crashed:",process.toString());						this.facade.throwError(process.error.code,process.error.description,notification.getName(),notification.getBody(),notification.getType());					}				public function setProcessBackward(name:String ="",amount:uint = 1):void		{			_factory.setProcessForward(name,-1 * amount);		}				public function setProcessForward(name:String ="",amount:uint = 1):void		{			if(!this.hasProcess(name))			{				this.facade.log("warn","Processor","process:",name,"doesn't exists");				return;			}			_factory.setProcessForward(name,amount);		}				public function repeateProcess(name:String ="",body:Object=null, type:String=null):void		{			if(!this.hasProcess(name))			{				this.facade.log("warn","Processor","process:",name,"doesn't exists");				return;			}			this.exec(name,body, type);		}				public function nextProcess(name:String ="",body:Object=null, type:String=null):void		{			if(!this.hasProcess(name))			{				this.facade.log("warn","Processor","process:",name,"doesn't exists");				return;			}			this.setProcessForward(name);						if(_factory.stack[name].count < _factory.stack[name].length) this.exec(name,body, type);			else 			{				this.facade.log("info","-- Process","process '"+name+"' is complete");				var process:Process = _factory.stack[name] as Process;				process.state = Process.INACTIVE;				if(process.once) removeProcess(name,true);				else process.count = 0;			}		}				public function abortProcess(name:String ="",body:Object=null, type:String=null):void		{			this.facade.log("info","-- Process","process '"+name+"' is aborted");			var process:Process = _factory.stack[name] as Process;			process.state = Process.INACTIVE;			if(process.once) removeProcess(name,true);		}				public function previousProcess(name:String ="",body:Object=null, type:String=null):void		{			if(!this.hasProcess(name))			{				this.facade.log("warn","Processor","process:",name,"doesn't exists");				return;			}			this.setProcessBackward(name);			if(_factory.stack[name] > -1) this.exec(name,body, type);		}				override public function toString():String		{			var str:String = "[ Class ProcessManager \n\n";						str += "----Process in stack----\n";						for(var i:String in _factory.stack)			{				str += "\t"+(_factory.stack[i] as Process).toString()+"\n";			}						str += "-------------\n\n";						str+="]\n";						return str;		}				private function exec(name:String,body:Object=null, type:String=null):void		{			var process:Process = _factory.stack[name] as Process;			this.facade.log("info","Processor","\t# command:",process.stack[process.count],"strats...");			this.facade.sendNotification(process.stack[process.count],CommandMetadata.setStep(process.count,body),type);		}	}	}