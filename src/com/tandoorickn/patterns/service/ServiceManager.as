package  com.tandoorickn.patterns.service{	import com.tandoorickn.debug.Log;	import com.tandoorickn.patterns.facade.AbstractFacade;		import org.puremvc.as3.interfaces.INotification;
		public class ServiceManager	{		protected var 	servicesMap  		:Object;				public var		facade				:AbstractFacade;		public function ServiceManager()		{			servicesMap			= {};		}				public function registerService(service:Class,notification:INotification = null):void		{			//Log.debug("ServiceManager","new Service:",service);			var serviceClassRef : Class = service;			var name:String = serviceClassRef.NAME;						if(!servicesMap[name])			{				var serviceInstance : AbstractService = new serviceClassRef( );								if(serviceInstance.dependencies)				{					//Log.debug("ServiceManager","Service",service,"dependencies:",serviceInstance.dependencies);					for(var i:uint = 0; i < serviceInstance.dependencies.length; i++)					{						registerService(serviceInstance.dependencies[i],notification);					}				}												servicesMap[name] = serviceInstance;				serviceInstance.facade = facade;				serviceInstance.execute(notification);				serviceInstance.configure(notification);							}								}				public function removeService(name:String):void		{			servicesMap[name].revision(null);			servicesMap[name] = null;		}	}	}