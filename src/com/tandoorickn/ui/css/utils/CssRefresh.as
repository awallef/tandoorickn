package  com.tandoorickn.ui.css.utils{	import com.tandoorickn.ui.css.core.CoreCssAlign;	import com.tandoorickn.ui.css.core.CoreCssOverflow;	import com.tandoorickn.ui.css.core.CoreCssSprite;		import flash.geom.Point;		public class CssRefresh {		public static function refresh(cssSprite:CoreCssSprite,w:Number,h:Number):void		{			/* cssSprite.blockRefresh */			var blockRefresh:Boolean = cssSprite.blockRefresh;			cssSprite.blockRefresh = true;						cssSprite.style.width = cssSprite.originalStyleWidth;			cssSprite.style.height = cssSprite.originalStyleHeight;			CssRefresh.calculate(cssSprite,w,h);						// Check if content > size			var tmpMinWidth:Number = cssSprite.minWidth;			var tmpMinHeight:Number = cssSprite.minHeight;						var scrollHNeed:Number = cssSprite.innerWidth - tmpMinWidth;			var scrollVNeed:Number = cssSprite.innerHeight - tmpMinHeight;						cssSprite.scrollingX = false;			cssSprite.scrollWidth = cssSprite.innerWidth;			cssSprite.scrollingY = false;			cssSprite.scrollHeight = cssSprite.innerHeight;						cssSprite.container.mask = null;			cssSprite.maskLayer.graphics.clear();			cssSprite.scrollV.visible = cssSprite.scrollH.visible = false;						switch(cssSprite.style.overflow)			{						case CoreCssOverflow.VISIBLE:										cssSprite.scrollingY = cssSprite.scrollingX = false;					cssSprite.style.width = cssSprite.originalStyleWidth;					cssSprite.style.height = cssSprite.originalStyleHeight;					cssSprite.scrollWidth = cssSprite.width;					cssSprite.scrollHeight = cssSprite.height;										if(scrollHNeed < 0 )					{						cssSprite.width = ( cssSprite.width - cssSprite.innerWidth ) + tmpMinWidth;						cssSprite.scrollWidth = tmpMinWidth;						cssSprite.style.width = cssSprite.scrollWidth+"px";					}										if(scrollVNeed < 0 )					{						cssSprite.height = ( cssSprite.height - cssSprite.innerHeight ) + tmpMinHeight;						cssSprite.scrollHeight = tmpMinHeight;						cssSprite.style.height = cssSprite.scrollHeight +"px";					}										if(scrollHNeed < 0  || scrollVNeed < 0 )						CssRefresh.calculate(cssSprite,cssSprite.width,cssSprite.height);					break;								case CoreCssOverflow.HIDDEN:										if(scrollHNeed < 0 )					{						cssSprite.scrollingX = true;						cssSprite.scrollWidth = tmpMinWidth;					}										if(scrollVNeed < 0 )					{						cssSprite.scrollingY = true;						cssSprite.scrollHeight = tmpMinHeight;					}										if(cssSprite.scrollingX  || cssSprite.scrollingY )						CssRefresh.setMask(false,cssSprite);					break;								case CoreCssOverflow.SCROLL:				case CoreCssOverflow.AUTO:										if( ( ( scrollHNeed < cssSprite.style.scrollThickness && scrollHNeed > 0 ) && scrollVNeed < cssSprite.style.scrollThickness ) || scrollHNeed < 0 ){						cssSprite.scrollingX = true;						cssSprite.scrollWidth = tmpMinWidth;					}										if( ( ( scrollVNeed < cssSprite.style.scrollThickness && scrollVNeed > 0 ) && scrollHNeed < cssSprite.style.scrollThickness ) || scrollVNeed < 0 )					{						cssSprite.scrollingY = true;						cssSprite.scrollHeight = tmpMinHeight;					}										if(cssSprite.scrollingX  || cssSprite.scrollingY )						CssRefresh.setMask(true,cssSprite);					break;			}						/* cssSprite.blockRefresh */			cssSprite.blockRefresh = (blockRefresh)? true: false;						cssSprite.render();			cssSprite.x =  cssSprite.outerX;			cssSprite.y =  cssSprite.outerY;						var spaceHLeft:Number = (cssSprite.scrollingX)? cssSprite.scrollWidth: cssSprite.innerWidth;			spaceHLeft -= (cssSprite.scrollingY && !cssSprite.scrollingX)? cssSprite.style.scrollThickness: 0;						var spaceVLeft:Number = (cssSprite.scrollingY)? cssSprite.scrollHeight: cssSprite.innerHeight;			spaceVLeft -= (cssSprite.scrollingX && !cssSprite.scrollingY)? cssSprite.style.scrollThickness: 0;						for(var i:String in cssSprite.item)			{					cssSprite.item[i].outerX =  cssSprite.innerX;				cssSprite.item[i].outerY =  cssSprite.innerY;				cssSprite.item[i].setSize(spaceHLeft,spaceVLeft);			}		}				static public function setMask(showScroll:Boolean,cssSprite:CoreCssSprite):void		{			cssSprite.container.mask = cssSprite.maskLayer;			cssSprite.maskLayer.graphics.beginFill(0xFF0000);			var maskWidth:Number = cssSprite.innerWidth;			var maskHeight:Number = cssSprite.innerHeight;												if(!showScroll)			{				cssSprite.maskLayer.graphics.drawRect(cssSprite.innerX,cssSprite.innerY,maskWidth,maskHeight);				return;			}						if(cssSprite.scrollingY && cssSprite.scrollingX)			{				maskWidth -= cssSprite.style.scrollThickness;				maskHeight -= cssSprite.style.scrollThickness;			}						if(cssSprite.scrollingX)			{				cssSprite.scrollH.visible = true;				cssSprite.scrollH.ratio = 0;				cssSprite.scrollH.relationship = maskWidth / cssSprite.scrollWidth;				cssSprite.container.x = 0;			}						if(cssSprite.scrollingY)			{				cssSprite.scrollV.visible = true;				cssSprite.scrollV.ratio = 0;				cssSprite.scrollV.relationship = maskHeight / cssSprite.scrollHeight;				cssSprite.container.y = 0;			}						cssSprite.scrollH.setSize(maskWidth, cssSprite.style.scrollThickness);			cssSprite.scrollV.setSize(cssSprite.style.scrollThickness, maskHeight );			cssSprite.scrollH.y = cssSprite.innerHeight - cssSprite.style.scrollThickness;			cssSprite.scrollV.x = cssSprite.innerWidth - cssSprite.style.scrollThickness;						cssSprite.maskLayer.graphics.drawRect(cssSprite.innerX,cssSprite.innerY,maskWidth,maskHeight);		}						public static function calculate(cssSprite:CoreCssSprite,w:Number,h:Number):void		{				var vertical:Array = CssRefresh.setHeight(cssSprite,h);			cssSprite.innerY = vertical[3].x;			cssSprite.innerHeight = vertical[3].y;			cssSprite.vertical = vertical;								var horizontal:Array = CssRefresh.setWidth(cssSprite,w);			cssSprite.innerX = horizontal[3].x;			cssSprite.innerWidth = horizontal[3].y;			cssSprite.horizontal = horizontal;		}				private static function setHeight(cssSprite:CoreCssSprite,h:Number):Array		{			var vertical:Array;						switch(cssSprite.style.verticalAlign)			{				case CoreCssAlign.TOP:					vertical = CssRefresh.alignTop(cssSprite,h);					break;									case CoreCssAlign.MIDDLE:					vertical = CssRefresh.alignMiddle(cssSprite,h);					break;									case CoreCssAlign.BOTTOM:					vertical = CssRefresh.alignBottom(cssSprite,h);					break;			}						return vertical;		}				private static function alignTop(cssSprite:CoreCssSprite,h:Number):Array		{			var outHeight:Number = CssHelper.findOutHeight(cssSprite,h);			var outY:Number = (outHeight == h)? 0: CssHelper.returnComputedSize(cssSprite.style.top,outHeight );						return CssHelper.insideVerticalAlign(cssSprite,outHeight,outY);					}				private static function alignMiddle(cssSprite:CoreCssSprite,h:Number):Array		{			var outHeight:Number =  CssHelper.findOutHeight(cssSprite,h);			var outY:Number = (outHeight == h)? 0: (( h - outHeight) / 2) + CssHelper.returnComputedSize(cssSprite.style.top,outHeight);						return CssHelper.insideVerticalAlign(cssSprite,outHeight,outY);		}				private static function alignBottom(cssSprite:CoreCssSprite,h:Number):Array		{			var outHeight:Number =  CssHelper.findOutHeight(cssSprite,h);			var outY:Number = (outHeight == h)? 0: ( h - outHeight - CssHelper.returnComputedSize(cssSprite.style.bottom,outHeight) - CssHelper.returnComputedSize(cssSprite.style.top,outHeight ) );						return CssHelper.insideVerticalAlign(cssSprite,outHeight,outY);		}										private static function setWidth(cssSprite:CoreCssSprite,w:Number):Array		{			var horizontal:Array;						switch(cssSprite.style.horizontalAlign)			{				case CoreCssAlign.LEFT:					horizontal = CssRefresh.alignLeft(cssSprite,w);					break;									case CoreCssAlign.CENTER:					horizontal = CssRefresh.alignCenter(cssSprite,w);					break;									case CoreCssAlign.RIGHT:					horizontal = CssRefresh.alignRight(cssSprite,w);					break;			}						return horizontal;		}				private static function alignLeft(cssSprite:CoreCssSprite,w:Number):Array		{			var outWidth:Number = CssHelper.findOutWidth(cssSprite,w);			var outX:Number = (outWidth == w)? 0: CssHelper.returnComputedSize(cssSprite.style.left,outWidth);						return CssHelper.insideHorizontalAlign(cssSprite,outWidth,outX);					}				private static function alignCenter(cssSprite:CoreCssSprite,w:Number):Array		{			var outWidth:Number = CssHelper.findOutWidth(cssSprite,w);			var outX:Number = (outWidth == w)? 0: (( w - outWidth) / 2) + CssHelper.returnComputedSize(cssSprite.style.left,outWidth);						return CssHelper.insideHorizontalAlign(cssSprite,outWidth,outX);		}				private static function alignRight(cssSprite:CoreCssSprite,w:Number):Array		{			var outWidth:Number = CssHelper.findOutWidth(cssSprite,outWidth);			var outX:Number = (outWidth == w)? 0: ( w - outWidth - CssHelper.returnComputedSize(cssSprite.style.right,outWidth) - CssHelper.returnComputedSize(cssSprite.style.left,outWidth) );						return CssHelper.insideHorizontalAlign(cssSprite,outWidth,outX);		}	}	}