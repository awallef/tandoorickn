package  com.tandoorickn.ui.css.core{	import com.tandoorickn.debug.Log;	import com.tandoorickn.events.ui.css.CssScrollEvent;	import com.tandoorickn.interfaces.ui.css.ICoreCssDisplayObject;	import com.tandoorickn.ui.css.utils.CssAttribute;	import com.tandoorickn.ui.css.utils.CssDraw;	import com.tandoorickn.ui.css.utils.CssHelper;	import com.tandoorickn.ui.css.utils.CssRefresh;		import flash.display.DisplayObject;	import flash.display.Graphics;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.MouseEvent;
		public class CoreCssSprite extends CoreCssSimpleSprite implements ICoreCssDisplayObject	{		protected var 	_style					:CoreCssStyle,						_overStyle				:CoreCssStyle,						_layer					:CoreCssSimpleSprite,						_minWidth				:Number,						_minHeight				:Number,						_isOver					:Boolean,						_originalStyleWidth		:String,						_mask					:Shape,						_originalStyleHeight	:String;				public var 		blockRefresh	:Boolean,						innerWidth		:Number,						innerHeight		:Number,						innerX			:Number,						innerY			:Number,						outerX			:Number,						outerY			:Number,						horizontal		:Array,						vertical		:Array,						item			:Object,						scrollingY		:Boolean,						scrollingX		:Boolean,						scrollWidth		:Number,						scrollHeight	:Number,						scrollH			:CoreCssScrollSlider,						scrollV			:CoreCssScrollSlider;				public function CoreCssSprite(css:CoreCssStyle = null,overCss:Object = null)		{			_minWidth = _minHeight = 0;						_style = new CoreCssStyle();			if(css != null) style = css;				if(overCss != null) this.overStyle = overCss;			blockRefresh = false;			outerX = 0;			outerY = 0;			item = {};			_isOver = false;						_originalStyleWidth = this.style.width;			_originalStyleHeight = this.style.height;						_layer = new CoreCssSimpleSprite();			_mask	= new Shape();						scrollV = new CoreCssScrollSlider();			scrollV.visible = false;			scrollV.addEventListener(CssScrollEvent.UPDATE, slideY);						scrollH = new CoreCssScrollSlider();			scrollH.visible = false;			scrollH.addEventListener(CssScrollEvent.UPDATE, slideX);									super();						super.addChild(_layer);						super.addChild(scrollV);			super.addChild(scrollH);									this.addEventListener(MouseEvent.MOUSE_OVER,onMouseOverMe);			this.addEventListener(MouseEvent.MOUSE_OUT,onMouseOutMe);		}				protected function onMouseOverMe(e:MouseEvent):void		{			onMouseOverAction();		}				protected function onMouseOutMe(e:MouseEvent):void		{			onMouseOutAction();		}				override public function addChild(child:DisplayObject):DisplayObject		{			return _layer.addChild(child);		}				override public function addChildAt(child:DisplayObject, index:int):DisplayObject		{			return _layer.addChildAt(child,index);		}				/*override public function get graphics():Graphics		{			return _layer.graphics;		}*/				public function get container():Sprite		{			return _layer;		}				public function get maskLayer():Shape		{			return _mask;		}				override public function set width(w:Number):void		{			_w = w;			if(!blockRefresh) refresh();		}				override public function set height(h:Number):void		{			_h = h;			if(!blockRefresh) refresh();		}				public function onMouseOverAction():void		{			_isOver = true;			if(_overStyle) this.render();		}				public function onMouseOutAction():void		{			_isOver = false;			if(_overStyle) this.render();		}				public function get style():CoreCssStyle		{			return ( _isOver && _overStyle )? _overStyle: _style;		}				public function set style(value:CoreCssStyle):void		{			_style = value;			CssHelper.findMinSize(this,_w,_h);			_originalStyleWidth = this.style.width;			_originalStyleHeight = this.style.height;		}				public function get overStyle():Object		{			return _overStyle as Object;		}				public function set overStyle(value:Object):void		{			_overStyle = new CoreCssStyle(_style.cloneAsObject());			_overStyle.merge(value);		}				public function addCssObject(cssObject:CoreCssSprite,name:String):void		{			item[name] = cssObject;			this.addChild(cssObject);			CssHelper.findMinSize(this,_w,_h);			if(!isNaN(_w) && !isNaN(_h)) refresh();		}				public function addCssObjectAt(cssObject:CoreCssSprite,name:String,index:uint):void		{			item[name] = cssObject;			this.addChildAt(cssObject,index);			CssHelper.findMinSize(this,_w,_h);			if(!isNaN(_w) && !isNaN(_h)) refresh();		}				public function removeCssObject(name:String):void		{			this.removeChild(item[name]);			item[name] = null;			CssHelper.findMinSize(this,_w,_h);			if(!isNaN(_w) && !isNaN(_h)) refresh();		}				public function get minWidth():Number		{			return _minWidth;		}				public function set minWidth(value:Number):void		{			_minWidth = value;		}				public function get minHeight():Number		{			return _minHeight;		}				public function set minHeight(value:Number):void		{			_minHeight = value;		}				public function get originalStyleWidth():String		{			return _originalStyleWidth;		}				public function set originalStyleWidth(value:String):void		{			_originalStyleWidth = value;		}				public function get originalStyleHeight():String		{			return _originalStyleHeight;		}				public function set originalStyleHeight(value:String):void		{			_originalStyleHeight = value;		}				public function refresh():void		{			if(blockRefresh) return;			CssRefresh.refresh(this,_w,_h);		}				public function render():void		{			CssDraw.draw(this,horizontal,vertical);			CssAttribute.setAttribute(this);		}		public function setSize(w:Number, h:Number, update:Boolean=true):void		{			_w = w;			_h = h;			if (update) refresh();		}				private function slideX(e:CssScrollEvent):void		{			_layer.x = -e.ratio * ( this.scrollWidth - this.innerWidth ) ;		}				private function slideY(e:CssScrollEvent):void		{			_layer.y = -e.ratio * ( this.scrollHeight - this.innerHeight ) ;		}	}	}