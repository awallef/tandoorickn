package  com.tandoorickn.ui.css.core{	import flash.text.TextField;	import flash.text.TextFieldType;	import com.tandoorickn.ui.css.utils.CssTextAttribute;	import flash.text.TextFormat;			public class CoreCssTextSprite extends CoreCssSprite	{		public var 	isHtml				:Boolean;												private var _textFormat			:TextFormat,					_textFormatOver		:TextFormat,					_textField			:TextField,					_textFieldOver		:TextField,					_content			:String;				public function CoreCssTextSprite(css:CoreCssStyle = null,overCss:Object = null)		{						super(css,overCss);						_content = "";						_textField = new TextField();			this.addChild(_textField);						_textFormat = new TextFormat();			_textField.defaultTextFormat = textFormat;						isHtml = false;		}				override public function onMouseOverAction():void		{			if(_textFieldOver)			{				_textField.visible = false;				_textFieldOver.visible = true;			}			super.onMouseOverAction();		}				override public function onMouseOutAction():void		{			if(_textFieldOver)			{				_textFieldOver.visible = false;				_textField.visible = true;			}			super.onMouseOutAction();		}				override public function set overStyle(value:Object):void		{						if(!_textFormatOver) _textFormatOver = new TextFormat();			if(!_textFieldOver) _textFieldOver = new TextField();			_textFieldOver.defaultTextFormat = _textFormatOver;			this.addChild(_textFieldOver);			_textFieldOver.visible = false;			super.overStyle = value;		}				public function get textField():TextField		{			return ( _isOver && _overStyle )? _textFieldOver: _textField;		}				public function set textField(value:TextField):void		{			_textField = value;		}				public function get textFormat():TextFormat		{			return ( _isOver && _overStyle )? _textFormatOver: _textFormat;		}				public function set textFormat(value:TextFormat):void		{			_textFormat = value;		}				public function get text():String		{ 			return (textField.type == TextFieldType.INPUT )? (isHtml)? textField.htmlText: textField.text : _content;		}				public function set text(value:String):void		{ 			_content = value;			textField.text = _content;			isHtml = false;		}				public function get html():String		{ 			return _content;		}				public function set html(value:String):void		{			_content = value;			textField.htmlText = _content;			isHtml = true;		}				override public function refresh():void		{			super.refresh();			_textField.x = this.innerX;			_textField.y = this.innerY;			_textField.width = this.innerWidth;			_textField.height = this.innerHeight;			if(_overStyle )			{				_textFieldOver.x = _textField.x;				_textFieldOver.y = _textField.y;				_textFieldOver.width = _textField.width;				_textFieldOver.height = _textField.height;			}		}				override public function render():void		{			super.render();			CssTextAttribute.setAttribute(this);					}	}	}