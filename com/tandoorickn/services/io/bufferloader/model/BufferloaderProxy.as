package  com.tandoorickn.services.io.bufferloader.model{	// TANDOORI	import com.tandoorickn.patterns.proxy.AbstractProxy;	import com.tandoorickn.debug.Log;		// STIMULI	import br.com.stimuli.loading.BulkLoader;	import br.com.stimuli.loading.loadingtypes.LoadingItem;	import br.com.stimuli.loading.BulkProgressEvent;    		public class BufferloaderProxy extends AbstractProxy	{				public static const NAME:String				= "BufferloaderProxy";				private var _buffer			:BulkLoader,					_noteSuccess	:String,					_noteFailed		:String,					_noteProgess	:String,					_sFct			:Function,					_eFct			:Function,					_pFct			:Function;				public var	bufferName		:String;				public function BufferloaderProxy( proxyName:String=null, data:Object=null )		{			super(proxyName,data);			Log.info("BufferloaderProxy","construct() with name '"+proxyName+"'");						bufferName = BulkLoader.getUniqueName();			_buffer = new BulkLoader(bufferName);		}				public function get(key:*):LoadingItem		{			return _buffer.get(key);		}				public function getContent(key:*):*		{			return _buffer.get(key).content;		}				/* New School		*****************************************************************************/		public function expressLoad(urlArray:Array,configArray:Array = null):Function		{			Log.info("BufferloaderProxy","expressLoad()");			for(var i:* in urlArray) 			{				if(configArray) _buffer.add(urlArray[i],configArray[i]);				else _buffer.add(urlArray[i]);			}						return function(success:Function,error:Function,progress:Function = null):void			{				_sFct = success;				_eFct = error;				_pFct = progress;								_buffer.addEventListener(BulkLoader.COMPLETE, onAllItemsLoaded);            	_buffer.addEventListener(BulkLoader.PROGRESS, onAllItemsProgress);				_buffer.addEventListener(BulkLoader.ERROR, onAllItemsError);            	_buffer.start();			};		}				/* Old Fashion!		*****************************************************************************/		public function add(url:String,config:Object = null):LoadingItem		{			return _buffer.add(url,config);		}				public function start(notificationSuccess:String = "",notificationFailed:String = "",notificationProgress:String = ""):void		{			_noteSuccess = notificationSuccess;			_noteFailed = notificationFailed;			_noteProgess = notificationProgress;						_buffer.addEventListener(BulkLoader.COMPLETE, onAllItemsLoaded);            _buffer.addEventListener(BulkLoader.PROGRESS, onAllItemsProgress);			_buffer.addEventListener(BulkLoader.ERROR, onAllItemsError);            _buffer.start();		}				/* private		*****************************************************************************/				private function onAllItemsError(evt : BulkProgressEvent) : void		{            Log.error("BufferloaderProxy","onAllItemsError",evt.loadingStatus());			_buffer.removeEventListener(BulkLoader.COMPLETE, onAllItemsLoaded);            _buffer.removeEventListener(BulkLoader.PROGRESS, onAllItemsProgress);			_buffer.removeEventListener(BulkLoader.ERROR, onAllItemsError);						if(_noteFailed != "") this.sendNotification(_noteFailed,{});			if(_eFct != null) 			{				_eFct(evt);				_eFct = null;				_sFct = null;				_pFct = null;			}        }				private function onAllItemsProgress(evt : BulkProgressEvent) : void		{            //Log.info("BufferloaderProxy",evt.loadingStatus());			if(_noteProgess != "") this.sendNotification(_noteProgess,{progress:evt.percentLoaded});			if(_pFct != null)  _pFct(evt);        }				private function onAllItemsLoaded(evt : BulkProgressEvent) : void		{			_buffer.removeEventListener(BulkLoader.COMPLETE, onAllItemsLoaded);            _buffer.removeEventListener(BulkLoader.PROGRESS, onAllItemsProgress);			_buffer.removeEventListener(BulkLoader.ERROR, onAllItemsError);						Log.info("BufferloaderProxy","onAllItemsLoaded",evt.loadingStatus());			if(_noteSuccess != "") this.sendNotification(_noteSuccess,{});			if(_sFct != null) 			{				_sFct(evt);				_eFct = null;				_sFct = null;				_pFct = null;			}		}	}	}