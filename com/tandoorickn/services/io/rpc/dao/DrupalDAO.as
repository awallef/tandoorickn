package com.tandoorickn.services.io.rpc.dao{	import com.tandoorickn.errors.TandooriError;	import com.tandoorickn.debug.Log;				public class DrupalDAO extends AMFDAO	{				private var _connected:Boolean,					_firstTime:Number;				public function DrupalDAO(name:String, uri:String, type:String, params:Object=null)		{			super(name, uri, type, params);						_firstTime = -1;			_connected = false;		}						override public function get isConnected():Boolean						{ return _connected; }				override public function connect():void		{			_nc.connect(uri);			_connected = true;		}				override public function close():void		{			_nc.close();			_connected = false;		}						override public function call(method:String,parameters:Array = null):Function		{			//Log.debug("DrupalDAO","call","is connected?",_connected);						if(_firstTime == -1) _firstTime = new Date().time;						if(!_connected) connect();						if(parameters == null)			{				return super.call(method);							}else{								// DO NOT FORGET THIS!!!				var config:Object = parameters[0]; 				var params:Array = parameters[1];												config.timeStamp = (new Date().time - _firstTime) + config.timeStamp;								/*var i:*;				trace("config:");				for( i in parameters[0]) trace(i,parameters[0][i]);				trace("params:");				for( i in parameters[1]) trace(i,parameters[1][i]);				*/								var nonce:String			= super.nonce(10);				var drupalKey:String 		= super.hash(config.apiKey,config.timeStamp+";"+config.domain+";"+nonce+";"+method);				return super.call(method,new Array(drupalKey,config.domain,config.timeStamp,nonce).concat(params));							}		}	}}