package  com.tandoorickn.patterns.workflow{	import com.tandoorickn.patterns.command.CommandMetadata;	import com.tandoorickn.patterns.facade.AbstractFacade;		import org.puremvc.as3.interfaces.*;
		public class WorkflowManager	{		protected var 	workflowMap  		:Object;				public var		facade				:AbstractFacade;		public function WorkflowManager()		{			workflowMap			= {};		}				public function hasWorkflow(name:String):Boolean		{			return ( workflowMap[name] )? true: false;		}				public function execute(name:String,notification:INotification = null):void		{			CommandMetadata.setMeta(name,CommandMetadata.WORKFLOW,notification);						(workflowMap[name] as AbstractWorkflow).execute( notification );		}				public function revision(name:String,notification:INotification = null):void		{						CommandMetadata.setMeta(name,CommandMetadata.WORKFLOW,notification);						(workflowMap[name] as AbstractWorkflow).revision( notification );		}				public function registerWorkflow(workflow:Class,notification:INotification):String		{			var workflowClassRef : Class = workflow;			var name:String = workflowClassRef.NAME;						if(!workflowMap[name])			{				this.facade.log("info","WorkflowManager","register new workflow:",name);				var workflowInstance : AbstractWorkflow = new workflowClassRef( );								workflowMap[name] = workflowInstance;				workflowInstance.facade = facade;				workflowInstance.initWorkflow(notification);				workflowInstance.configure(notification);							}else this.facade.log("warn","WorkflowManager",name,"allready exists");						return name;					}				public function retriveWorkflow(name:String):*		{			if(workflowMap[name]) return workflowMap[name];			else return null;		}				public function removeWorkflow(name:String,notification:INotification = null):void		{			workflowMap[name].removeWorkflow(notification);			workflowMap[name] = null;		}	}	}