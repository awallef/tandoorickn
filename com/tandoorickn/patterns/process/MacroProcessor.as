package  com.tandoorickn.patterns.process{	import com.tandoorickn.debug.Log;	import com.tandoorickn.interfaces.patterns.IProcess;	import com.tandoorickn.patterns.command.CommandMetadata;	import com.tandoorickn.patterns.facade.AbstractFacade;		import flash.events.EventDispatcher;		import org.puremvc.as3.interfaces.*;		public class MacroProcessor extends EventDispatcher	{		private var		_stack				:Object,						_facade				:AbstractFacade;						public function MacroProcessor()		{			_stack 				= {};		}				public function set facade(value:AbstractFacade):void		{			_facade = value;		}				public function retriveMacro(name:String):Macro		{			if(!hasMacro(name))			{				Log.warn("MacroProcessManager","Macro:",name,"dosn't exists");				return new Macro("Null Macro",[]);			}						return _stack[name];		}				public function addMacro(macro:Macro):void		{			if(hasMacro(macro.name)) 			{				Log.warn("MacroProcessManager","Macro:",macro.name,"already exists");				return;			}			_stack[macro.name] = macro;		}				public function removeMacro(name:String, andDistroy:Boolean = false):void		{			if(!hasMacro(name))			{				Log.warn("MacroProcessManager","Macro:",name,"dosn't exists");				return;			}			if(andDistroy) ( _stack[name] as Macro ).kill();			_stack[name] = null;			}				public function hasMacro(name:String):Boolean		{			return (_stack[name])? true: false;		}				public function addAndCreateMacro(name:String,args:Array):void		{			if(hasMacro(name)) 			{				Log.warn("MacroProcessManager","Macro:",name,"already exists");				return;			}			_stack[name] = new Macro(name,args);		}				public function execute( name:String, notification:INotification = null):void		{			if(!hasMacro(name))			{				Log.warn("MacroProcessManager","Macro:",name,"dosn't exists");				return;			}						var commands:Array = getRawCommandsList(name);						Log.info("MacroProcessManager","execute",name);						_facade.process.addAndCreateProcess(name,commands,true);						CommandMetadata.setMeta(name,CommandMetadata.MACRO,notification);						_facade.process.execute( name, notification );		}				private function getRawCommandsList( name:String):Array		{			var macro:Macro = _stack[name] as Macro;						var commands:Array = new Array();						for( var i:uint = 0; i < macro.stack.length; i++)			{				if(hasMacro(macro.stack[i])) commands = commands.concat(getRawCommandsList(macro.stack[i]));				else if(_facade.process.hasProcess(macro.stack[i])) commands = commands.concat(_facade.process.getSpecificStack(macro.stack[i]));				else commands.push(macro.stack[i]);			}						return commands;		}			}	}